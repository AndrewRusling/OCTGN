/*
 * This file was automatically generated by MyGeneration! (from BinarySender.zeus)
 * Do not modify, changes will get lost when the file is regenerated!
 */
using System;
using System.IO;

namespace Octgn.Server
{
	abstract class BaseBinaryStub : Octgn.Server.IClientCalls
	{
        private static log4net.ILog Log = log4net.LogManager.GetLogger(nameof(BaseBinaryStub));

	    private Handler handler;

	    public BaseBinaryStub(Handler handler)
	    { this.handler = handler; }

		protected abstract void Send(byte[] data);

    public void Binary()
    {
			if(nameof(Binary) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Binary)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)0);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Error(string msg)
    {
			if(nameof(Error) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Error)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)1);
				writer.Write(msg);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Kick(string reason)
    {
			if(nameof(Kick) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Kick)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)3);
				writer.Write(reason);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Welcome(byte id, Guid gameSessionId, bool waitForGameState)
    {
			if(nameof(Welcome) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Welcome)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)6);
				writer.Write(id);
				writer.Write(gameSessionId.ToByteArray());
				writer.Write(waitForGameState);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Settings(bool twoSidedTable, bool allowSpectators, bool muteSpectators)
    {
			if(nameof(Settings) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Settings)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)7);
				writer.Write(twoSidedTable);
				writer.Write(allowSpectators);
				writer.Write(muteSpectators);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void PlayerSettings(byte playerId, bool invertedTable, bool spectator)
    {
			if(nameof(PlayerSettings) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(PlayerSettings)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)8);
				writer.Write(playerId);
				writer.Write(invertedTable);
				writer.Write(spectator);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void NewPlayer(byte id, string nick, string userId, ulong pkey, bool tableSide, bool spectator)
    {
			if(nameof(NewPlayer) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(NewPlayer)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)9);
				writer.Write(id);
				writer.Write(nick);
				writer.Write(userId);
				writer.Write(pkey);
				writer.Write(tableSide);
				writer.Write(spectator);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Leave(byte player)
    {
			if(nameof(Leave) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Leave)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)10);
				writer.Write(player);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Nick(byte player, string nick)
    {
			if(nameof(Nick) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Nick)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)12);
				writer.Write(player);
				writer.Write(nick);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Start()
    {
			if(nameof(Start) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Start)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)13);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Reset(byte player)
    {
			if(nameof(Reset) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Reset)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)15);
				writer.Write(player);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void NextTurn(byte player, bool setActive, bool force)
    {
			if(nameof(NextTurn) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(NextTurn)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)16);
				writer.Write(player);
				writer.Write(setActive);
				writer.Write(force);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void StopTurn(byte player)
    {
			if(nameof(StopTurn) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(StopTurn)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)18);
				writer.Write(player);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void SetPhase(byte phase, byte[] players, bool force)
    {
			if(nameof(SetPhase) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(SetPhase)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)20);
				writer.Write(phase);
				writer.Write((short)players.Length);
				foreach (byte p in players)
					writer.Write(p);
				writer.Write(force);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void SetActivePlayer(byte player)
    {
			if(nameof(SetActivePlayer) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(SetActivePlayer)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)22);
				writer.Write(player);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void ClearActivePlayer()
    {
			if(nameof(ClearActivePlayer) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(ClearActivePlayer)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)23);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Chat(byte player, string text)
    {
			if(nameof(Chat) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Chat)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)25);
				writer.Write(player);
				writer.Write(text);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Print(byte player, string text)
    {
			if(nameof(Print) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Print)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)27);
				writer.Write(player);
				writer.Write(text);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Random(int result)
    {
			if(nameof(Random) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Random)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)29);
				writer.Write(result);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Counter(byte player, int counter, int value, bool isScriptChange)
    {
			if(nameof(Counter) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Counter)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)31);
				writer.Write(player);
				writer.Write(counter);
				writer.Write(value);
				writer.Write(isScriptChange);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void LoadDeck(int[] id, Guid[] type, int[] group, string[] size, string sleeve, bool limited)
    {
			if(nameof(LoadDeck) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(LoadDeck)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)32);
				writer.Write((short)id.Length);
				foreach (int p in id)
					writer.Write(p);
				writer.Write((short)type.Length);
				foreach (Guid g in type)
					writer.Write(g.ToByteArray());
				writer.Write((short)group.Length);
				foreach (int p in group)
					writer.Write(p);
				writer.Write((short)size.Length);
				foreach (string s in size)
					writer.Write(s);
				writer.Write(sleeve);
				writer.Write(limited);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void CreateCard(int[] id, Guid[] type, string[] size, int group)
    {
			if(nameof(CreateCard) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(CreateCard)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)33);
				writer.Write((short)id.Length);
				foreach (int p in id)
					writer.Write(p);
				writer.Write((short)type.Length);
				foreach (Guid g in type)
					writer.Write(g.ToByteArray());
				writer.Write((short)size.Length);
				foreach (string s in size)
					writer.Write(s);
				writer.Write(group);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void CreateCardAt(int[] id, Guid[] modelId, int[] x, int[] y, bool faceUp, bool persist)
    {
			if(nameof(CreateCardAt) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(CreateCardAt)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)34);
				writer.Write((short)id.Length);
				foreach (int p in id)
					writer.Write(p);
				writer.Write((short)modelId.Length);
				foreach (Guid g in modelId)
					writer.Write(g.ToByteArray());
				writer.Write((short)x.Length);
				foreach (int p in x)
					writer.Write(p);
				writer.Write((short)y.Length);
				foreach (int p in y)
					writer.Write(p);
				writer.Write(faceUp);
				writer.Write(persist);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void CreateAliasDeprecated(int[] id, ulong[] type)
    {
			if(nameof(CreateAliasDeprecated) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(CreateAliasDeprecated)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)35);
				writer.Write((short)id.Length);
				foreach (int p in id)
					writer.Write(p);
				writer.Write((short)type.Length);
							foreach (ulong p in type)
								writer.Write(p);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void MoveCard(byte player, int[] id, int group, int[] idx, bool[] faceUp, bool isScriptMove)
    {
			if(nameof(MoveCard) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(MoveCard)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)37);
				writer.Write(player);
				writer.Write((short)id.Length);
				foreach (int p in id)
					writer.Write(p);
				writer.Write(group);
				writer.Write((short)idx.Length);
				foreach (int p in idx)
					writer.Write(p);
				writer.Write((short)faceUp.Length);
				foreach (bool p in faceUp)
					writer.Write(p);
				writer.Write(isScriptMove);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void MoveCardAt(byte player, int[] id, int[] x, int[] y, int[] idx, bool[] faceUp, bool isScriptMove)
    {
			if(nameof(MoveCardAt) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(MoveCardAt)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)39);
				writer.Write(player);
				writer.Write((short)id.Length);
				foreach (int p in id)
					writer.Write(p);
				writer.Write((short)x.Length);
				foreach (int p in x)
					writer.Write(p);
				writer.Write((short)y.Length);
				foreach (int p in y)
					writer.Write(p);
				writer.Write((short)idx.Length);
				foreach (int p in idx)
					writer.Write(p);
				writer.Write((short)faceUp.Length);
				foreach (bool p in faceUp)
					writer.Write(p);
				writer.Write(isScriptMove);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Peek(byte player, int card)
    {
			if(nameof(Peek) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Peek)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)41);
				writer.Write(player);
				writer.Write(card);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Untarget(byte player, int card, bool isScriptChange)
    {
			if(nameof(Untarget) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Untarget)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)43);
				writer.Write(player);
				writer.Write(card);
				writer.Write(isScriptChange);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Target(byte player, int card, bool isScriptChange)
    {
			if(nameof(Target) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Target)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)45);
				writer.Write(player);
				writer.Write(card);
				writer.Write(isScriptChange);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void TargetArrow(byte player, int card, int otherCard, bool isScriptChange)
    {
			if(nameof(TargetArrow) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(TargetArrow)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)47);
				writer.Write(player);
				writer.Write(card);
				writer.Write(otherCard);
				writer.Write(isScriptChange);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Highlight(int card, string color)
    {
			if(nameof(Highlight) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Highlight)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)48);
				writer.Write(card);
				writer.Write(color);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Turn(byte player, int card, bool up)
    {
			if(nameof(Turn) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Turn)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)50);
				writer.Write(player);
				writer.Write(card);
				writer.Write(up);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Rotate(byte player, int card, CardOrientation rot)
    {
			if(nameof(Rotate) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Rotate)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)52);
				writer.Write(player);
				writer.Write(card);
				writer.Write((byte)rot);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void ShuffleDeprecated(int group, int[] card)
    {
			if(nameof(ShuffleDeprecated) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(ShuffleDeprecated)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)53);
				writer.Write(group);
				writer.Write((short)card.Length);
				foreach (int p in card)
					writer.Write(p);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Shuffled(byte player, int group, int[] card, short[] pos)
    {
			if(nameof(Shuffled) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Shuffled)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)54);
				writer.Write(player);
				writer.Write(group);
				writer.Write((short)card.Length);
				foreach (int p in card)
					writer.Write(p);
				writer.Write((short)pos.Length);
				foreach (short p in pos)
					writer.Write(p);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void UnaliasGrpDeprecated(int group)
    {
			if(nameof(UnaliasGrpDeprecated) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(UnaliasGrpDeprecated)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)55);
				writer.Write(group);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void UnaliasDeprecated(int[] card, ulong[] type)
    {
			if(nameof(UnaliasDeprecated) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(UnaliasDeprecated)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)56);
				writer.Write((short)card.Length);
				foreach (int p in card)
					writer.Write(p);
				writer.Write((short)type.Length);
							foreach (ulong p in type)
								writer.Write(p);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void AddMarker(byte player, int card, Guid id, string name, ushort count, ushort origCount, bool isScriptChange)
    {
			if(nameof(AddMarker) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(AddMarker)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)58);
				writer.Write(player);
				writer.Write(card);
				writer.Write(id.ToByteArray());
				writer.Write(name);
				writer.Write(count);
				writer.Write(origCount);
				writer.Write(isScriptChange);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void RemoveMarker(byte player, int card, Guid id, string name, ushort count, ushort origCount, bool isScriptChange)
    {
			if(nameof(RemoveMarker) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(RemoveMarker)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)60);
				writer.Write(player);
				writer.Write(card);
				writer.Write(id.ToByteArray());
				writer.Write(name);
				writer.Write(count);
				writer.Write(origCount);
				writer.Write(isScriptChange);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void TransferMarker(byte player, int from, int to, Guid id, string name, ushort count, ushort origCount, bool isScriptChange)
    {
			if(nameof(TransferMarker) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(TransferMarker)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)62);
				writer.Write(player);
				writer.Write(from);
				writer.Write(to);
				writer.Write(id.ToByteArray());
				writer.Write(name);
				writer.Write(count);
				writer.Write(origCount);
				writer.Write(isScriptChange);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void PassTo(byte player, int id, byte to, bool requested)
    {
			if(nameof(PassTo) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(PassTo)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)64);
				writer.Write(player);
				writer.Write(id);
				writer.Write(to);
				writer.Write(requested);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void TakeFrom(int id, byte to)
    {
			if(nameof(TakeFrom) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(TakeFrom)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)66);
				writer.Write(id);
				writer.Write(to);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void DontTake(int id)
    {
			if(nameof(DontTake) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(DontTake)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)68);
				writer.Write(id);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void FreezeCardsVisibility(int group)
    {
			if(nameof(FreezeCardsVisibility) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(FreezeCardsVisibility)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)69);
				writer.Write(group);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void GroupVis(byte player, int group, bool defined, bool visible)
    {
			if(nameof(GroupVis) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(GroupVis)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)71);
				writer.Write(player);
				writer.Write(group);
				writer.Write(defined);
				writer.Write(visible);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void GroupVisAdd(byte player, int group, byte who)
    {
			if(nameof(GroupVisAdd) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(GroupVisAdd)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)73);
				writer.Write(player);
				writer.Write(group);
				writer.Write(who);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void GroupVisRemove(byte player, int group, byte who)
    {
			if(nameof(GroupVisRemove) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(GroupVisRemove)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)75);
				writer.Write(player);
				writer.Write(group);
				writer.Write(who);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void LookAt(byte player, int uid, int group, bool look)
    {
			if(nameof(LookAt) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(LookAt)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)77);
				writer.Write(player);
				writer.Write(uid);
				writer.Write(group);
				writer.Write(look);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void LookAtTop(byte player, int uid, int group, int count, bool look)
    {
			if(nameof(LookAtTop) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(LookAtTop)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)79);
				writer.Write(player);
				writer.Write(uid);
				writer.Write(group);
				writer.Write(count);
				writer.Write(look);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void LookAtBottom(byte player, int uid, int group, int count, bool look)
    {
			if(nameof(LookAtBottom) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(LookAtBottom)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)81);
				writer.Write(player);
				writer.Write(uid);
				writer.Write(group);
				writer.Write(count);
				writer.Write(look);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void StartLimited(byte player, Guid[] packs)
    {
			if(nameof(StartLimited) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(StartLimited)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)83);
				writer.Write(player);
				writer.Write((short)packs.Length);
				foreach (Guid g in packs)
					writer.Write(g.ToByteArray());
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void CancelLimited(byte player)
    {
			if(nameof(CancelLimited) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(CancelLimited)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)85);
				writer.Write(player);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void CardSwitchTo(byte player, int card, string alternate)
    {
			if(nameof(CardSwitchTo) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(CardSwitchTo)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)86);
				writer.Write(player);
				writer.Write(card);
				writer.Write(alternate);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void PlayerSetGlobalVariable(byte player, string name, string oldval, string val)
    {
			if(nameof(PlayerSetGlobalVariable) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(PlayerSetGlobalVariable)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)87);
				writer.Write(player);
				writer.Write(name);
				writer.Write(oldval);
				writer.Write(val);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void SetGlobalVariable(string name, string oldval, string val)
    {
			if(nameof(SetGlobalVariable) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(SetGlobalVariable)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)88);
				writer.Write(name);
				writer.Write(oldval);
				writer.Write(val);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Ping()
    {
			if(nameof(Ping) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Ping)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)90);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void IsTableBackgroundFlipped(bool isFlipped)
    {
			if(nameof(IsTableBackgroundFlipped) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(IsTableBackgroundFlipped)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)91);
				writer.Write(isFlipped);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void PlaySound(byte player, string name)
    {
			if(nameof(PlaySound) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(PlaySound)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)92);
				writer.Write(player);
				writer.Write(name);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Ready(byte player)
    {
			if(nameof(Ready) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Ready)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)93);
				writer.Write(player);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void PlayerState(byte player, byte state)
    {
			if(nameof(PlayerState) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(PlayerState)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)94);
				writer.Write(player);
				writer.Write(state);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void RemoteCall(byte player, string function, string args)
    {
			if(nameof(RemoteCall) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(RemoteCall)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)95);
				writer.Write(player);
				writer.Write(function);
				writer.Write(args);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void GameStateReq(byte player)
    {
			if(nameof(GameStateReq) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(GameStateReq)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)96);
				writer.Write(player);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void GameState(byte toPlayer, string state)
    {
			if(nameof(GameState) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(GameState)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)97);
				writer.Write(toPlayer);
				writer.Write(state);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void DeleteCard(int card, byte player)
    {
			if(nameof(DeleteCard) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(DeleteCard)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)98);
				writer.Write(card);
				writer.Write(player);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void PlayerDisconnect(byte player)
    {
			if(nameof(PlayerDisconnect) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(PlayerDisconnect)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)99);
				writer.Write(player);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void AddPacks(byte player, Guid[] packs, bool selfOnly)
    {
			if(nameof(AddPacks) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(AddPacks)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)101);
				writer.Write(player);
				writer.Write((short)packs.Length);
				foreach (Guid g in packs)
					writer.Write(g.ToByteArray());
				writer.Write(selfOnly);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void AnchorCard(int id, byte player, bool anchor)
    {
			if(nameof(AnchorCard) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(AnchorCard)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)102);
				writer.Write(id);
				writer.Write(player);
				writer.Write(anchor);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void SetCardProperty(int id, byte player, string name, string val, string valtype)
    {
			if(nameof(SetCardProperty) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(SetCardProperty)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)103);
				writer.Write(id);
				writer.Write(player);
				writer.Write(name);
				writer.Write(val);
				writer.Write(valtype);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void ResetCardProperties(int id, byte player)
    {
			if(nameof(ResetCardProperties) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(ResetCardProperties)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)104);
				writer.Write(id);
				writer.Write(player);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void Filter(int card, string color)
    {
			if(nameof(Filter) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(Filter)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)105);
				writer.Write(card);
				writer.Write(color);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void SetBoard(string name)
    {
			if(nameof(SetBoard) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(SetBoard)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)106);
				writer.Write(name);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}

    public void SetPlayerColor(byte player, string color)
    {
			if(nameof(SetPlayerColor) != nameof(Ping))
				Log.Debug($"SERVER OUT: {nameof(SetPlayerColor)}");
			using(var stream = new MemoryStream(512)) {
			stream.Seek(4, SeekOrigin.Begin);
			using(var writer = new BinaryWriter(stream)) {
				writer.Write(handler.muted);
				writer.Write((byte)107);
				writer.Write(player);
				writer.Write(color);
				writer.Flush(); writer.Seek(0, SeekOrigin.Begin);
				writer.Write((int)stream.Length);
				writer.Close();
				Send(stream.ToArray());
			}
		}
	}
	}

	class BinarySenderStub : BaseBinaryStub
	{
		private ServerSocket to;

		public BinarySenderStub(ServerSocket to, Handler handler) : base(handler)
		{ this.to = to; }

		protected override void Send(byte[] data)
		{
			try
			{
				to.Send(data);
			}
			catch
			{
// TODO: Notify disconnection
//				if (Program.Server != null && Program.Server.Disconnected(to))
//					return;
//				Program.Client.Disconnected();
			}
		}
	}
}
